- hosts: all
  connection: local
  become: no
 
  vars:
    #vsphere_hostname: "{{ lookup('env', 'VSPHERE_HOSTNAME') }}"
    vsphere_username: "{{ lookup('env', 'VSPHERE_USERNAME') }}"
    vsphere_password: "{{ lookup('env', 'VSPHERE_PASSWORD') }}"

    esxi_hostname: "{{ hostvars[inventory_hostname]['esxi_host'] }}"
    vsphere_datacenter: "{{ hostvars[inventory_hostname]['vsphere_datacenter'] }}"
    vsphere_datastore: "{{ hostvars[inventory_hostname]['vsphere_datastore'] }}"
    vsphere_iso_datastore: "{{ hostvars[inventory_hostname]['vsphere_iso_datastore'] }}"
    vsphere_iso_directory: "{{ hostvars[inventory_hostname]['vsphere_iso_folder'] }}"
    vsphere_hostname: "{{ hostvars[inventory_hostname]['vsphere_hostname'] }}"

    vm_network: "{{ hostvars[inventory_hostname]['vm_network'] }}"
    iso_image: "{{ hostvars[inventory_hostname]['iso_image'] }}"
    ram_mb: "{{ hostvars[inventory_hostname]['ram_mb'] }}"
    cpu_count: "{{ hostvars[inventory_hostname]['cpu_count'] }}"
    local_admin_pass: "{{ hostvars[inventory_hostname]['local_admin_pass'] | password_hash }}"
 
  tasks:
 
  - command: mktemp -d
    delegate_to: localhost
    register: tempdir
 
  - command: mktemp -d
    delegate_to: localhost
    register: loopdir

  - name: Prep autoinstall ISO
    when: True
    block: 

    - name: create user-data file on custom iso
      template:
        src: "{{ playbook_dir }}/templates/user-data.j2"
        dest: "{{ tempdir.stdout }}/user-data"


    - name: create autoinstall file on custom iso
      template:
        src: "{{ playbook_dir }}/templates/meta-data.j2"
        dest: "{{ tempdir.stdout }}/meta-data"

    - name: create local build directory
      file: 
        path: build
        state: directory
 
    - name: create custom iso image
      #command: mkisofs -r -N -allow-leading-dots -d -J -T -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -V "{{ inventory_hostname_short }}" -boot-load-size 4 -boot-info-table -o build/{{ inventory_hostname }}.iso {{ tempdir.stdout }}
      command: genisoimage -o build/{{ inventory_hostname }}.iso -volid CIDATA -J -R -v -T {{ tempdir.stdout }}
      #command: xorriso -as mkisofs -r -V 'Ubuntu 22.04 LTS AUTO (EFIBIOS)' -o ../ubuntu-22.04-autoinstall.iso --grub2-mbr ../BOOT/1-Boot-NoEmul.img -partition_offset 16 --mbr-force-bootable -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b ../BOOT/2-Boot-NoEmul.img -appended_part_as_gpt -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 -c '/boot.catalog' -b '/boot/grub/i386-pc/eltorito.img' -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info -eltorito-alt-boot -e '--interval:appended_partition_2:::' -no-emul-boot  .
      delegate_to: localhost

    - name: upload autoinstall ISO 
      vsphere_copy:
        hostname: "{{ vsphere_hostname }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        datacenter: "{{ vsphere_datacenter }}"
        datastore: "{{ vsphere_iso_datastore }}"
        src: "{{ playbook_dir }}/build/{{ inventory_hostname }}.iso"
        path: "{{ vsphere_iso_directory }}/{{ inventory_hostname }}.iso"
        timeout: 120
        validate_certs: False

  - name: Query if boot ISO already exists, do not constantly re-upload it. RED TEXT/FAILURE HERE IS OK.
    vsphere_file:
      host: "{{ vsphere_hostname }}"
      username: "{{ vsphere_username }}"
      password: "{{ vsphere_password }}"
      datacenter: "{{ vsphere_datacenter }}"
      datastore: "{{ vsphere_iso_datastore }}"
      path: "{{ vsphere_iso_directory }}/{{ iso_image }}"
      state: file
      validate_certs: False
    delegate_to: localhost
    register: iso_exists
    ignore_errors: true

  - name: Print if the ISO was found
    ansible.builtin.debug: 
      msg: "The variable iso_exists.state is: {{ iso_exists.state }}"
 
  - name: upload boot ISO 
    when: iso_exists.state == "absent"
    vsphere_copy:
      hostname: "{{ vsphere_hostname }}"
      username: "{{ vsphere_username }}"
      password: "{{ vsphere_password }}"
      datacenter: "{{ vsphere_datacenter }}"
      datastore: "{{ vsphere_iso_datastore }}"
      src: "{{ playbook_dir }}/isos/{{ iso_image }}"
      path: "{{ vsphere_iso_directory }}/{{ iso_image }}"
      timeout: 120
      validate_certs: False
 
  - name: cleanup temp directories
    file:
      path: "{{ loopdir.stdout }}"
      state: absent
 
  - name: cleanup temp directories
    file:
      path: "{{ tempdir.stdout }}"
      state: absent
 
  - name: cleanup custom iso
    file:
      path: build/{{ inventory_hostname }}.iso
      state: absent
 
  - name: create vm
    vmware_guest:
      validate_certs: False
      hostname: "{{ vsphere_hostname }}"
      username: "{{ vsphere_username }}"
      password: "{{ vsphere_password }}"
      datacenter: "{{ vsphere_datacenter }}"
      esxi_hostname: "{{ esxi_hostname }}"
      folder: /
      name: "{{ inventory_hostname }}"
      guest_id: ubuntu64Guest
      state: poweredon
      disk:
        - size_gb: 32
          type: thin
          datastore: "{{ vsphere_datastore }}"
      networks:
        - name: "{{ vm_network }}"
      hardware:
        memory_mb: "{{ ram_mb }}"
        num_cpus: "{{ cpu_count }}"
      cdrom:
        - controller_number: 1
          controller_type: ide
          unit_number: 0
          type: iso
          iso_path: "[{{ vsphere_iso_datastore }}] /{{ vsphere_iso_directory }}/{{ iso_image }}"
        - controller_number: 1
          controller_type: ide
          unit_number: 1
          type: iso
          iso_path: "[{{ vsphere_iso_datastore }}] /{{ vsphere_iso_directory }}/{{ inventory_hostname }}.iso"

  - name: delete custom iso image from datastore
    when: False
    vsphere_copy:
      validate_certs: False
      hostname: '{{ vsphere_hostname }}'
      username: '{{ vsphere_username }}'
      password: '{{ vsphere_password }}'
      datacenter: "{{ vsphere_datacenter }}"
      datastore: "{{ vsphere_datastore }}"
      path: "{{ vsphere_iso_directory }}/{{ inventory_hostname }}.iso"
      state: absent
    delegate_to: localhost
