- hosts: all
  connection: local
  become: no


#  vars_prompt:
#  - name: "vsphere_username"
#    prompt: "Enter your vsphere username"
#    private: yes
#  - name: "vsphere_password"
#    prompt: "Enter your vsphere password"
#    private: yes
      
  vars:
    esxi_hostname: "{{ hostvars[inventory_hostname]['esxi_host'] }}"
    vsphere_datacenter: "{{ hostvars[inventory_hostname]['vsphere_datacenter'] }}"
    vsphere_datastore: "{{ hostvars[inventory_hostname]['vsphere_datastore'] }}"
    vsphere_iso_datastore: "{{ hostvars[inventory_hostname]['vsphere_iso_datastore'] }}"
    vsphere_iso_directory: "{{ hostvars[inventory_hostname]['vsphere_iso_folder'] }}"
    vsphere_hostname: "{{ hostvars[inventory_hostname]['vsphere_hostname'] }}"

    vm_network: "{{ hostvars[inventory_hostname]['vm_network'] }}"
    iso_image: "{{ hostvars[inventory_hostname]['iso_image'] }}"
    ram_mb: "{{ hostvars[inventory_hostname]['ram_mb'] }}"
    cpu_count: "{{ hostvars[inventory_hostname]['cpu_count'] }}"
    disk_gb: "{{ hostvars[inventory_hostname]['disk_gb'] }}"
    unattend: "{{ hostvars[inventory_hostname]['unattend'] }}"

    vsphere_username: "{{ lookup('env', 'VSPHERE_USERNAME') }}"
    vsphere_password: "{{ lookup('env', 'VSPHERE_PASSWORD') }}"

  tasks:
 
  - command: mktemp -d
    delegate_to: localhost
    register: tempdir
 
  - name: ensure local build directory exists
    file: 
      path: "{{ playbook_dir }}/build"
      state: directory

  - name: Update ISO image filename to end with -no-prompt.iso 
    set_fact: iso_image="{{ iso_image }}-no-prompt.iso"


  - name: Query if Windows ISO already exists, do not constantly re-upload it. RED TEXT/FAILURE HERE IS OK.
    vsphere_file:
      host: "{{ vsphere_hostname }}"
      username: "{{ vsphere_username }}"
      password: "{{ vsphere_password }}"
      datacenter: "{{ vsphere_datacenter }}"
      datastore: "{{ vsphere_iso_datastore }}"
      path: "{{ vsphere_iso_directory }}/{{ iso_image }}"
      state: file
      validate_certs: False
    delegate_to: localhost
    register: iso_exists
    ignore_errors: true

  - name: Print if the ISO was found
    ansible.builtin.debug: 
      msg: "The variable iso_exists.state is: {{ iso_exists.state }}"
 
  - name: place autounattend.xml file on custom iso image
    template:
      src: "{{ playbook_dir }}/templates/{{ unattend }}.j2"
      dest: "{{ tempdir.stdout }}/autounattend.xml"
 
  - name: place ip-hostname.ps1 on custom iso image
    template:
      src: "{{ playbook_dir }}/templates/ip-hostname.ps1.j2"
      dest: "{{ tempdir.stdout }}/ip-hostname.ps1"
 
  - name: create custom autounattend iso image
    command: genisoimage -o {{ playbook_dir }}/build/{{ inventory_hostname }}.iso -J -R -v -T -V 'autounattend.xml' {{ tempdir.stdout }}
    delegate_to: localhost

  - name: upload Windows ISO 
    when: iso_exists.state == "absent"
    vsphere_copy:
      hostname: "{{ vsphere_hostname }}"
      username: "{{ vsphere_username }}"
      password: "{{ vsphere_password }}"
      datacenter: "{{ vsphere_datacenter }}"
      datastore: "{{ vsphere_iso_datastore }}"
      src: "{{ playbook_dir }}/build/{{ iso_image }}"
      path: "{{ vsphere_iso_directory }}/{{  iso_image }}"
      timeout: 360
      validate_certs: False
 
  - name: upload custom ISO for autounattend.xml
    vsphere_copy:
      hostname: "{{ vsphere_hostname }}"
      username: "{{ vsphere_username }}"
      password: "{{ vsphere_password }}"
      datacenter: "{{ vsphere_datacenter }}"
      datastore: "{{ vsphere_iso_datastore }}"
      src: "{{ playbook_dir }}/build/{{ inventory_hostname }}.iso"
      path: "{{ vsphere_iso_directory }}/{{ inventory_hostname }}.iso"
      timeout: 360
      validate_certs: False

  - name: cleanup temp directories
    file:
      path: "{{ tempdir.stdout }}"
      state: absent
 
  - name: cleanup custom iso from build directory
    file:
      path: "{{ playbook_dir }}/build/{{ inventory_hostname }}.iso"
      state: absent
 
  - name: create vm
    vmware_guest:
      validate_certs: False
      hostname: "{{ vsphere_hostname }}"
      username: "{{ vsphere_username }}"
      password: "{{ vsphere_password }}"
      datacenter: "{{ vsphere_datacenter }}"
      esxi_hostname: "{{ esxi_hostname }}"
      folder: /
      name: "{{ inventory_hostname }}"
      guest_id: windows9_64Guest
      state: poweredon
      disk:
        - size_gb: "{{ disk_gb }}" 
          controller_type: lsilogicsas
          controller_number: 0
          unit_number: 0
          type: thin
          datastore: "{{ vsphere_datastore }}"
      networks:
        - name: "{{ vm_network }}"
          device_type: e1000e
      hardware:
        memory_mb: "{{ ram_mb }}"
        num_cpus: "{{ cpu_count }}"
        boot_firmware: efi
        scsi: lsilogicsas
      cdrom:
        - controller_number: 1
          controller_type: ide
          unit_number: 0
          type: iso
          iso_path: "[{{ vsphere_iso_datastore }}] /{{ vsphere_iso_directory }}/{{ iso_image }}"
        - controller_number: 1
          controller_type: ide
          unit_number: 1
          type: iso
          iso_path: "[{{ vsphere_iso_datastore }}] /{{ vsphere_iso_directory }}/{{ inventory_hostname }}.iso"

  - name: Add USB 3.0 controllers for virtual machine
    community.vmware.vmware_guest_controller:
      validate_certs: False
      hostname: "{{ vsphere_hostname }}"
      username: "{{ vsphere_username }}"
      password: "{{ vsphere_password }}"
      datacenter: "{{ vsphere_datacenter }}"
      name: "{{ inventory_hostname }}"
      controllers:
        - state: present
          type: usb3
    delegate_to: localhost
    register: disk_controller_facts

  - name: delete custom iso image from datastore
    when: False 
    vsphere_copy:
      validate_certs: False
      hostname: '{{ vsphere_hostname }}'
      username: '{{ vsphere_username }}'
      password: '{{ vsphere_password }}'
      datacenter: "{{ vsphere_datacenter }}"
      datastore: "{{ vsphere_datastore }}"
      path: "{{ vsphere_iso_directory }}/{{ inventory_hostname }}.iso"
      state: absent
    delegate_to: localhost
